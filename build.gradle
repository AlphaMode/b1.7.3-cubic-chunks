import java.util.function.Function;

plugins {
//	id 'wisp-gradle' version '1.0-SNAPSHOT'
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'java'
	id 'java-library'
	id 'maven-publish'
}

//import me.alphamode.wisp.mappings.FileMappingsProvider;

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/vulkan.accesswidener")
	clientOnlyMinecraftJar()
//	gluedMinecraftJar()
	customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
}

//wisp {
//	minecraft("b1.7.3")
//	versionManifestUrl.set("https://babric.github.io/manifest-polyfill/b1.7.3.json")
//	hasBundler.set(false)
//	mappingsProvider.set(new FileMappingsProvider(file("mappings.tiny").toPath(), file("mappings.tiny").toPath()))
//	clientOnly().set(true)
//}

repositories {
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// Used for the fabric toolchain in this project.
	maven {
		name = 'Babric'
		url = 'https://maven.glass-launcher.net/babric'
	}
	// Used for mappings.
	maven {
		name = 'Glass Releases'
		url = 'https://maven.glass-launcher.net/releases'
	}
	// Used for StationAPI and HowManyItems.
	maven {
		name = 'Glass Snapshots'
		url = 'https://maven.glass-launcher.net/snapshots'
	}
	// Used for a StationAPI dependency.
	maven {
		name = 'Froge'
		url 'https://maven.neoforged.net/'
	}
	// Used for projects that do not have a maven repository, but do have a GitHub repository with working build scripts.
	maven {
		name = 'Jitpack'
		url = 'https://jitpack.io'
	}
	// Used for another StationAPI dependency
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		url 'https://repo.sleeping.town'
		content {
			includeGroup 'com.unascribed'
		}
	}
	mavenLocal()
	maven {
		url "https://mcphackers.github.io/libraries/"
	}
//	maven {
//		url = "https://libraries.minecraft.net"
//	}
//	maven {
//		url = "https://maven.fabricmc.net/"
//	}
//	maven {
//		url = 'https://plugins.gradle.org/m2/'
//	}
	mavenCentral()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "me.alphamode:nostalgia:${project.yarn_mappings}"
	implementation "me.alphamode.wisp:wisp-loader:${project.loader_version}"
	implementation "me.alphamode.wisp:wispified-launchwrapper:1.0-SNAPSHOT"
	implementation("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5") {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	implementation 'org.ow2.asm:asm:9.6'
	implementation 'org.ow2.asm:asm-commons:9.6'

	implementation 'it.unimi.dsi:fastutil:8.5.12'

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2'

	implementation("com.google.guava:guava:32.1.3-jre")
	implementation("io.github.opencubicchunks:regionlib:0.78.0-SNAPSHOT")
	implementation(/*include(*/"io.netty:netty-all:4.0.24.Final"/*)*/)

//	modImplementation "net.modificationstation:StationAPI:${project.stapi_version}"

	// Optional, but convenient mods for mod creators and users alike.
//	modImplementation("com.github.calmilamsy:ModMenu:${project.modmenu_version}") {
//		transitive false
//	}
//	modImplementation("net.glasslauncher.mods:GlassConfigAPI:${project.gcapi_version}") {
//		transitive false
//	}
//	modImplementation("net.glasslauncher:HowManyItems-Fabric-Unofficial:${project.howmanyitems_version}") {
//		transitive false
//	}


//	implementation("org.lwjgl:lwjgl-vulkan:3.3.2")
//	ext.lwjglVersion = "3.3.2"
//	switch (OperatingSystem.current()) {
//		case OperatingSystem.WINDOWS:
//			ext.lwjglNatives = "natives-windows"
//			break
//		case OperatingSystem.LINUX:
//			ext.lwjglNatives = "natives-linux"
//			break
//		case OperatingSystem.MAC_OS:
//			ext.lwjglNatives = "natives-macos"
//			break
//	}
//	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
//	["", "-glfw", "-jemalloc", "-openal", "-opengl", "-stb", "-vulkan"].each {
//		implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
//		include "org.lwjgl:lwjgl$it:$lwjglVersion:$lwjglNatives"
//	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	// Loom also requires J17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
